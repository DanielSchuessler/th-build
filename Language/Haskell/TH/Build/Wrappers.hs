{-# LANGUAGE NoMonomorphismRestriction, FlexibleContexts #-}
{-# OPTIONS -Wall #-}
module Language.Haskell.TH.Build.Wrappers where
import Language.Haskell.TH
import Language.Haskell.TH.Lib
import Language.Haskell.TH.Build.Convertible

-- AUTOGENERATED by gen-wrappers.hs!

appE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ
appE' = preconvert2 appE
appT' :: (Convertible typeQ TypeQ, Convertible typeQ' TypeQ) => typeQ -> typeQ' -> TypeQ
appT' = preconvert2 appT
appsE' :: (Convertible expQs [ExpQ]) => expQs -> ExpQ
appsE' = preconvert1 appsE
arithSeqE' :: (Convertible rangeQ RangeQ) => rangeQ -> ExpQ
arithSeqE' = preconvert1 arithSeqE
arrowK' :: (Convertible kind Kind, Convertible kind' Kind) => kind -> kind' -> Kind
arrowK' = preconvert2 arrowK
asP' :: (Convertible name Name, Convertible patQ PatQ) => name -> patQ -> PatQ
asP' = preconvert2 asP
bangP' :: (Convertible patQ PatQ) => patQ -> PatQ
bangP' = preconvert1 bangP
bindS' :: (Convertible patQ PatQ, Convertible expQ ExpQ) => patQ -> expQ -> StmtQ
bindS' = preconvert2 bindS
caseE' :: (Convertible expQ ExpQ, Convertible matchQs [MatchQ]) => expQ -> matchQs -> ExpQ
caseE' = preconvert2 caseE
classD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible funDeps [FunDep], Convertible decQs [DecQ]) => cxtQ -> name -> tyVarBndrs -> funDeps -> decQs -> DecQ
classD' = preconvert5 classD
classP' :: (Convertible name Name, Convertible typeQs [TypeQ]) => name -> typeQs -> PredQ
classP' = preconvert2 classP
clause' :: (Convertible patQs [PatQ], Convertible bodyQ BodyQ, Convertible decQs [DecQ]) => patQs -> bodyQ -> decQs -> ClauseQ
clause' = preconvert3 clause
compE' :: (Convertible stmtQs [StmtQ]) => stmtQs -> ExpQ
compE' = preconvert1 compE
conE' :: (Convertible name Name) => name -> ExpQ
conE' = preconvert1 conE
conP' :: (Convertible name Name, Convertible patQs [PatQ]) => name -> patQs -> PatQ
conP' = preconvert2 conP
conT' :: (Convertible name Name) => name -> TypeQ
conT' = preconvert1 conT
condE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ
condE' = preconvert3 condE
cxt' :: (Convertible predQs [PredQ]) => predQs -> CxtQ
cxt' = preconvert1 cxt
dataD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible conQs [ConQ], Convertible names [Name]) => cxtQ -> name -> tyVarBndrs -> conQs -> names -> DecQ
dataD' = preconvert5 dataD
dataInstD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible typeQs [TypeQ], Convertible conQs [ConQ], Convertible names [Name]) => cxtQ -> name -> typeQs -> conQs -> names -> DecQ
dataInstD' = preconvert5 dataInstD
doE' :: (Convertible stmtQs [StmtQ]) => stmtQs -> ExpQ
doE' = preconvert1 doE
dyn' :: (Convertible string String) => string -> Q Exp
dyn' = preconvert1 dyn
equalP' :: (Convertible typeQ TypeQ, Convertible typeQ' TypeQ) => typeQ -> typeQ' -> PredQ
equalP' = preconvert2 equalP
familyKindD' :: (Convertible famFlavour FamFlavour, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible kind Kind) => famFlavour -> name -> tyVarBndrs -> kind -> DecQ
familyKindD' = preconvert4 familyKindD
familyNoKindD' :: (Convertible famFlavour FamFlavour, Convertible name Name, Convertible tyVarBndrs [TyVarBndr]) => famFlavour -> name -> tyVarBndrs -> DecQ
familyNoKindD' = preconvert3 familyNoKindD
fieldExp' :: (Convertible name Name, Convertible expQ ExpQ) => name -> expQ -> Q (Name, Exp)
fieldExp' = preconvert2 fieldExp
fieldPat' :: (Convertible name Name, Convertible patQ PatQ) => name -> patQ -> FieldPatQ
fieldPat' = preconvert2 fieldPat
forImpD' :: (Convertible callconv Callconv, Convertible safety Safety, Convertible string String, Convertible name Name, Convertible typeQ TypeQ) => callconv -> safety -> string -> name -> typeQ -> DecQ
forImpD' = preconvert5 forImpD
forallC' :: (Convertible tyVarBndrs [TyVarBndr], Convertible cxtQ CxtQ, Convertible conQ ConQ) => tyVarBndrs -> cxtQ -> conQ -> ConQ
forallC' = preconvert3 forallC
forallT' :: (Convertible tyVarBndrs [TyVarBndr], Convertible cxtQ CxtQ, Convertible typeQ TypeQ) => tyVarBndrs -> cxtQ -> typeQ -> TypeQ
forallT' = preconvert3 forallT
fromE' :: (Convertible expQ ExpQ) => expQ -> ExpQ
fromE' = preconvert1 fromE
fromR' :: (Convertible expQ ExpQ) => expQ -> RangeQ
fromR' = preconvert1 fromR
fromThenE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ
fromThenE' = preconvert2 fromThenE
fromThenR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> RangeQ
fromThenR' = preconvert2 fromThenR
fromThenToE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ
fromThenToE' = preconvert3 fromThenToE
fromThenToR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> RangeQ
fromThenToR' = preconvert3 fromThenToR
fromToE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ
fromToE' = preconvert2 fromToE
fromToR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> RangeQ
fromToR' = preconvert2 fromToR
funD' :: (Convertible name Name, Convertible clauseQs [ClauseQ]) => name -> clauseQs -> DecQ
funD' = preconvert2 funD
funDep' :: (Convertible names [Name], Convertible names' [Name]) => names -> names' -> FunDep
funDep' = preconvert2 funDep
global' :: (Convertible name Name) => name -> ExpQ
global' = preconvert1 global
guardedB' :: (Convertible guardedExpQs [Q (Guard, Exp)]) => guardedExpQs -> BodyQ
guardedB' = preconvert1 guardedB
infixApp' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ
infixApp' = preconvert3 infixApp
infixC' :: (Convertible strictTypeQ (Q (Strict, Type)), Convertible name Name, Convertible strictTypeQ' (Q (Strict, Type))) => strictTypeQ -> name -> strictTypeQ' -> ConQ
infixC' = preconvert3 infixC
infixE' :: (Convertible maybeExpQ (Maybe ExpQ), Convertible expQ ExpQ, Convertible maybeExpQ' (Maybe ExpQ)) => maybeExpQ -> expQ -> maybeExpQ' -> ExpQ
infixE' = preconvert3 infixE
infixP' :: (Convertible patQ PatQ, Convertible name Name, Convertible patQ' PatQ) => patQ -> name -> patQ' -> PatQ
infixP' = preconvert3 infixP
instanceD' :: (Convertible cxtQ CxtQ, Convertible typeQ TypeQ, Convertible decQs [DecQ]) => cxtQ -> typeQ -> decQs -> DecQ
instanceD' = preconvert3 instanceD
kindedTV' :: (Convertible name Name, Convertible kind Kind) => name -> kind -> TyVarBndr
kindedTV' = preconvert2 kindedTV
lam1E' :: (Convertible patQ PatQ, Convertible expQ ExpQ) => patQ -> expQ -> ExpQ
lam1E' = preconvert2 lam1E
lamE' :: (Convertible patQs [PatQ], Convertible expQ ExpQ) => patQs -> expQ -> ExpQ
lamE' = preconvert2 lamE
letE' :: (Convertible decQs [DecQ], Convertible expQ ExpQ) => decQs -> expQ -> ExpQ
letE' = preconvert2 letE
letS' :: (Convertible decQs [DecQ]) => decQs -> StmtQ
letS' = preconvert1 letS
listE' :: (Convertible expQs [ExpQ]) => expQs -> ExpQ
listE' = preconvert1 listE
listP' :: (Convertible patQs [PatQ]) => patQs -> PatQ
listP' = preconvert1 listP
litE' :: (Convertible lit Lit) => lit -> ExpQ
litE' = preconvert1 litE
litP' :: (Convertible lit Lit) => lit -> PatQ
litP' = preconvert1 litP
match' :: (Convertible patQ PatQ, Convertible bodyQ BodyQ, Convertible decQs [DecQ]) => patQ -> bodyQ -> decQs -> MatchQ
match' = preconvert3 match
newtypeD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible conQ ConQ, Convertible names [Name]) => cxtQ -> name -> tyVarBndrs -> conQ -> names -> DecQ
newtypeD' = preconvert5 newtypeD
newtypeInstD' :: (Convertible cxtQ CxtQ, Convertible name Name, Convertible typeQs [TypeQ], Convertible conQ ConQ, Convertible names [Name]) => cxtQ -> name -> typeQs -> conQ -> names -> DecQ
newtypeInstD' = preconvert5 newtypeInstD
noBindS' :: (Convertible expQ ExpQ) => expQ -> StmtQ
noBindS' = preconvert1 noBindS
normalB' :: (Convertible expQ ExpQ) => expQ -> BodyQ
normalB' = preconvert1 normalB
normalC' :: (Convertible name Name, Convertible strictTypeQs [StrictTypeQ]) => name -> strictTypeQs -> ConQ
normalC' = preconvert2 normalC
normalG' :: (Convertible expQ ExpQ) => expQ -> GuardQ
normalG' = preconvert1 normalG
normalGE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> Q (Guard, Exp)
normalGE' = preconvert2 normalGE
parS' :: (Convertible stmtQss [[StmtQ]]) => stmtQss -> StmtQ
parS' = preconvert1 parS
parensE' :: (Convertible expQ ExpQ) => expQ -> ExpQ
parensE' = preconvert1 parensE
parensP' :: (Convertible patQ PatQ) => patQ -> PatQ
parensP' = preconvert1 parensP
patG' :: (Convertible stmtQs [StmtQ]) => stmtQs -> GuardQ
patG' = preconvert1 patG
patGE' :: (Convertible stmtQs [StmtQ], Convertible expQ ExpQ) => stmtQs -> expQ -> Q (Guard, Exp)
patGE' = preconvert2 patGE
plainTV' :: (Convertible name Name) => name -> TyVarBndr
plainTV' = preconvert1 plainTV
pragInlD' :: (Convertible name Name, Convertible inlineSpecQ InlineSpecQ) => name -> inlineSpecQ -> DecQ
pragInlD' = preconvert2 pragInlD
pragSpecD' :: (Convertible name Name, Convertible typeQ TypeQ) => name -> typeQ -> DecQ
pragSpecD' = preconvert2 pragSpecD
pragSpecInlD' :: (Convertible name Name, Convertible typeQ TypeQ, Convertible inlineSpecQ InlineSpecQ) => name -> typeQ -> inlineSpecQ -> DecQ
pragSpecInlD' = preconvert3 pragSpecInlD
recC' :: (Convertible name Name, Convertible varStrictTypeQs [VarStrictTypeQ]) => name -> varStrictTypeQs -> ConQ
recC' = preconvert2 recC
recConE' :: (Convertible name Name, Convertible nameExpPairQs [Q (Name, Exp)]) => name -> nameExpPairQs -> ExpQ
recConE' = preconvert2 recConE
recP' :: (Convertible name Name, Convertible fieldPatQs [FieldPatQ]) => name -> fieldPatQs -> PatQ
recP' = preconvert2 recP
recUpdE' :: (Convertible expQ ExpQ, Convertible nameExpPairQs [Q (Name, Exp)]) => expQ -> nameExpPairQs -> ExpQ
recUpdE' = preconvert2 recUpdE
sectionL' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ
sectionL' = preconvert2 sectionL
sectionR' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ) => expQ -> expQ' -> ExpQ
sectionR' = preconvert2 sectionR
sigD' :: (Convertible name Name, Convertible typeQ TypeQ) => name -> typeQ -> DecQ
sigD' = preconvert2 sigD
sigE' :: (Convertible expQ ExpQ, Convertible typeQ TypeQ) => expQ -> typeQ -> ExpQ
sigE' = preconvert2 sigE
sigP' :: (Convertible patQ PatQ, Convertible typeQ TypeQ) => patQ -> typeQ -> PatQ
sigP' = preconvert2 sigP
sigT' :: (Convertible typeQ TypeQ, Convertible kind Kind) => typeQ -> kind -> TypeQ
sigT' = preconvert2 sigT
strictType' :: (Convertible strictQ (Q Strict), Convertible typeQ TypeQ) => strictQ -> typeQ -> StrictTypeQ
strictType' = preconvert2 strictType
tildeP' :: (Convertible patQ PatQ) => patQ -> PatQ
tildeP' = preconvert1 tildeP
tupE' :: (Convertible expQs [ExpQ]) => expQs -> ExpQ
tupE' = preconvert1 tupE
tupP' :: (Convertible patQs [PatQ]) => patQs -> PatQ
tupP' = preconvert1 tupP
tySynD' :: (Convertible name Name, Convertible tyVarBndrs [TyVarBndr], Convertible typeQ TypeQ) => name -> tyVarBndrs -> typeQ -> DecQ
tySynD' = preconvert3 tySynD
tySynInstD' :: (Convertible name Name, Convertible typeQs [TypeQ], Convertible typeQ TypeQ) => name -> typeQs -> typeQ -> DecQ
tySynInstD' = preconvert3 tySynInstD
uInfixE' :: (Convertible expQ ExpQ, Convertible expQ' ExpQ, Convertible expQ'' ExpQ) => expQ -> expQ' -> expQ'' -> ExpQ
uInfixE' = preconvert3 uInfixE
uInfixP' :: (Convertible patQ PatQ, Convertible name Name, Convertible patQ' PatQ) => patQ -> name -> patQ' -> PatQ
uInfixP' = preconvert3 uInfixP
unboxedTupE' :: (Convertible expQs [ExpQ]) => expQs -> ExpQ
unboxedTupE' = preconvert1 unboxedTupE
unboxedTupP' :: (Convertible patQs [PatQ]) => patQs -> PatQ
unboxedTupP' = preconvert1 unboxedTupP
valD' :: (Convertible patQ PatQ, Convertible bodyQ BodyQ, Convertible decQs [DecQ]) => patQ -> bodyQ -> decQs -> DecQ
valD' = preconvert3 valD
varE' :: (Convertible name Name) => name -> ExpQ
varE' = preconvert1 varE
varP' :: (Convertible name Name) => name -> PatQ
varP' = preconvert1 varP
varStrictType' :: (Convertible name Name, Convertible strictTypeQ StrictTypeQ) => name -> strictTypeQ -> VarStrictTypeQ
varStrictType' = preconvert2 varStrictType
varT' :: (Convertible name Name) => name -> TypeQ
varT' = preconvert1 varT
viewP' :: (Convertible expQ ExpQ, Convertible patQ PatQ) => expQ -> patQ -> PatQ
viewP' = preconvert2 viewP

